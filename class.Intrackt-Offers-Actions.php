<?php
namespace Intrackt\Offers;

/*
 * The Actions class will display any log messages generated by the Offers
 */
class Actions {

    /*
     * Have we instantiated the class-- this is a singleton and does not produce children
     */
	private static $initiated = false;
    
    /*
     * Init class
     */
	public static function init() {
		if ( ! self::$initiated ) {
    		self::$initiated = true;
		}
        
	}

    /*
     * modify code above YITH name your price on product page
     */
    public static function YithNYP_productPageAbove() {
        
        /*
         * We are looking at a product with name your price
         */
        global $offersLinkNeeded;
        $offersLinkNeeded = true;
        
        /*
         * Hide offer if the shopper did not click the offers link
         */
        if (strpos($_SERVER['QUERY_STRING'],'offers') === false) {
            
            /*
             * Do whatever is needed to hide name your price first time
             */
            echo "<div id='NameYourPriceHide' style='display: none;'>";
        }
        
        
    }    

    /*
     * modify code below YITH name your price on product page
     */
    public static function YithNYP_productPageBelow() {
        
        /*
         * Hide offer if the shopper did not click the offers link
         */
        if (strpos($_SERVER['QUERY_STRING'],'offers') === false) {
        
            /*
             * Do whatever is needed to hide name your price first time
             */
            echo "</div>";
        
        }
    }    

    /*
     * Define placeholder for Make an Offer link
     */
    public static function offersLink() {
        
        echo "<div id='Intract_Offers_Link' name='Intract_Offers_Link' class='Intract_Offers_Link_class'></div>";
        
    }
        
    /*
     * Router to modify code below add to cart button depending on the plugin used
     */
    public static function offersEnable() {
        
        /*
         * Do the Yith Name Your Price changes if that is the installed plugin
         */
        global $offersLinkNeeded;
        if (isset($offersLinkNeeded)) {
            self::YithNYP_OffersEnabled();
        }
        
        /*
         * Do the AngellEye Make an Offer changes if that is the installed plugin
         */
        self::angellEyeMaO_OffersEnabled();
        
    }
        
    /*
     * Handle modifications for the Yith Name Your Product plugin
     */
    private static function YithNYP_OffersEnabled() {
        
        /*
         * new name for add to cart button
         */
        $options = apply_filters('intrackt_offers_get_options',\get_option('intrackt_offers'),__FUNCTION__,func_get_args());        
        
        echo '<script>';
        
        /*
         * write the Javascript function to change thepage when the link is clicked
         */
        echo 
            'function clickedIntractMAOLink() {'.
                'document.getElementById("NameYourPriceHide").style.display="inline";'.
                'document.getElementById("Intract_Offers_Link").style.display="none";'.
                'document.getElementsByName("add-to-cart")[0].innerText="'.$options['offerstext'].'";'.
                'return false;'.
            '}'
        ;
        
        /*
         * Change the button to the normal add to cart text
         */
        if ($options['addtocarttext']!='') {
            $text=str_replace('"','&quot;',$options['addtocarttext']);
            echo 'document.getElementsByName("add-to-cart")[0].innerText="'.$text.'";';
        }
        
        /*
         * show the offers link
         */
        $innerHtml="<a href='#' onclick='return clickedIntractMAOLink()()'>".$options['linktext']."</a>";
        echo 'document.getElementById("Intract_Offers_Link").innerHTML="'.$innerHtml.'"';
        
        echo '</script>';

    }    

    /*
     * Handle modifications for the AngellEye Make an Offer plugin
     */
    private static function angellEyeMaO_OffersEnabled() {
        
        /*
         * reference the current product
         */
        global $wpdb,$post;
        
        /*
         * new name for add to cart button
         */
        $options = apply_filters('intrackt_offers_get_options',\get_option('intrackt_offers'),__FUNCTION__,func_get_args());

        /*
         * is this a counter offer
         */
        $counterOffer=array_key_exists('offer-pid',$_GET)?1:0;
        
        /*
         * if auto decline enabled and being stopped at form submit:
         */
        if ((get_post_meta($post->ID,'_offers_for_woocommerce_auto_decline_enabled',true)=='yes')
            &&(trim($options['toolowmsg'])!='')) {
            
            /*
             * default to actual price
             */
            $price=get_post_meta($post->ID,'_regular_price',true);

            /*
             * use the minimum acceptable percent of the price in pennys.
             */
            $declinePercent= get_post_meta($post->ID,'_offers_for_woocommerce_auto_decline_percentage',true);
            $declinePercent=\floatval($declinePercent);
            $declinePrice=\intval((\floatval($price) * $declinePercent) + 0.5);
            
        /*
         * else, auto decline is under 0
         */
        } else {
            $declinePrice=0;
            $declinePercent=0;
        }
        $declinePrice=apply_filters('intrackt_offers_set_declineprice',$declinePrice);
        $declinePercent=apply_filters('intrackt_offers_set_declinePercent',$declinePercent);
        
        ?>
        <script>
            
            /*
             * save decline price and percentage so that it can be adjusted if variations
             * Also initialise variation object and determine if a counter offer
             */
            declinePrice=<?= $declinePrice ?>;
            declinePercent=<?= $declinePercent ?>;
            counterOffer=<?= $counterOffer ?>;
            variationsObject=null;
            
            /*
             * Adjust decline price if a variation
             */
            var qtyObj=null;
            function adjustVariationPriceAndQty(formObj) {
                
                /*
                 * if qty to be changed, do it
                 */
                if (qtyObj!==null)
                    qtyObj.value=1;
                
                /*
                 * skip if not doing too low message
                 */
                if (declinePercent==0) return;
                
                /*
                 * get the array of variation details and bail if missing or empty
                 */
                variationJSON=formObj.getAttribute('data-product_variations');
                if ((variationJSON===null)||(variationJSON=='')) return;
                
                /*
                 * get the variations object
                 */
                variationsObject=JSON.parse(variationJSON);
                
                return;
                
            }
            
            /*
             * Test if amount is too low and adjust up
             */
            function testTooLow(e) {
                
                /*
                 * assume that the too low message shouldn't show
                 */
                document.getElementById("too_low_msg").style.display='none';
                
                /*
                 * get the offered price and proceed if not entered yet
                 */
                offer=document.getElementById('woocommerce-make-offer-form-price-each').value.replace(/\,/g,'');
                if (offer=='') return true;
                
                /*
                 * if the offer is less than the minimum acceptable price in pennys, fail
                 */
                if (parseInt(offer*100) < declinePrice) {
                    e.preventDefault();
                    document.getElementById("too_low_msg").style.display='inline';
                    return false;
                }
                
                /*
                 * Otherwise, let the offer go through
                 */
                return true;
            }
            
            /*
             * change offer full price for variations when offer form opened
             */
            function changeOfferPrice() {
                
                /*
                 * get target display price
                 */
                toOfferPrice=document.getElementById('intrackt_offer_price');
                if ((toOfferPrice!==null)&&(toOfferPrice!==undefined)) {
                    
                    /*
                     * Deal with changing the display price
                     */
                    variationWrap=document.getElementsByClassName('single_variation_wrap');
                    if ((variationWrap!==null)&&(variationWrap!==undefined)&&(variationWrap.length>0)) {
                        priceSpan=variationWrap[0].getElementsByClassName('woocommerce-Price-amount amount');
                        if ((priceSpan!==null)&&(priceSpan!==undefined)&&(priceSpan.length>0)) {
                           toOfferPrice.innerHTML=priceSpan[0].innerHTML;
                        } else {
                            window.setTimeout(function() {
                                if ((priceSpan!==null)&&(priceSpan!==undefined)&&(priceSpan.length>0))
                                    toOfferPrice.innerHTML=priceSpan[0].innerHTML;
                            },1000)
                        }
                    }
                }
                
                /*
                 * if we are testing for minimum rejection and we have the variations
                 */
                if ((declinePercent>0)&&(variationsObject!==null)) {
                    
                    /*
                     * get variation ID
                     */
                    variationIdObj=document.getElementsByClassName('variation_id');
                    if ((variationIdObj!==null)&&(variationIdObj!==undefined)) {
                        variationId=variationIdObj[0].value;
                        
                        /*
                         * loop through variations to get price for this variation
                         */
                        myPrice=null;
                        for (i=0;i<variationsObject.length;i++) {
                            if (variationsObject[i]['variation_id']==variationId) {
                                myPrice=variationsObject[i]['display_regular_price'];
                                break;
                            }
                        }
                        
                        /*
                         * if price found, generate decline price
                         */
                        if (myPrice!=null) {
                            declinePrice=Math.floor((myPrice * declinePercent) + 0.5);
                        }
                    }
                }
            }
        
            /*
             * show offer form if make offer clicked
             */
            function clickedIntractMAOLinkLA() {
                
                /* show offers form */ 
                document.getElementById("tab-title-tab_custom_ofwc_offer").style.display="inline";
                document.getElementById("tab-tab_custom_ofwc_offer").style.display="inline";
                document.getElementById("tab_custom_ofwc_offer_tab_inner").style.display="inline";
            
            }
        
            /*
             * hide offer form if attribute changed
             */
            function unclickedIntractMAOLinkLA() {
                
                /* show offers form */ 
                document.getElementById("tab-title-tab_custom_ofwc_offer").style.display="none";
                document.getElementById("tab-tab_custom_ofwc_offer").style.display="none";
                document.getElementById("tab_custom_ofwc_offer_tab_inner").style.display="none";
            
            }
        
            /*
             * write the Javascript function to change the page when the link is clicked using layout A
             */
            function usingIntractMAOLinkLA() {
            
                //console.log('usingIntractMAOLinkLA');
            
                /* turn off offers link */
                document.getElementById("Intract_Offers_Link").style.display="none";
                
                /*
                 * hide add to cart button
                 */
                if (<?= $options['hideaddtocart'] ?>==1) {
                    possibleObjs=document.getElementsByClassName("single_add_to_cart_button");
                    for (i=0;i<possibleObjs.length;i++) {
                        if (possibleObjs[i].tagName=='BUTTON')
                            possibleObjs[i].style.display="none";
                    }
                }
            
                /* show offers button with our text override */ 
                maoButton = document.querySelector('[id^="offers-for-woocommerce-make-offer-button-id-"]');
                //maoButton.innerText="<?= $options['offerstext'] ?>";
                maoButton.style.display="inline";
                maoButton.addEventListener("click",clickedIntractMAOLinkLA);
                
                //set so that attribute changes hide offer form
                attributeSelectors=document.querySelectorAll("[name^='attribute_']");
                if ((attributeSelectors!==null)&&(attributeSelectors!=undefined))
                    for (i=0;i<attributeSelectors.length;i++)
                        attributeSelectors[i].addEventListener("change",unclickedIntractMAOLinkLA);
                
                /*
                 * set offers quantity to 1 and hide it
                 */
                if (<?= $options['setqtyto1'] ?>==1) {
                    qtyObj=document.getElementById("woocommerce-make-offer-form-quantity");
                    qtyObj.value=1;
                    qtyObj.parentNode.style.display="none";
                }
                
                /*
                 * set even to show price when offer form opened.
                 */
                variationWrap=document.getElementsByClassName('single_variation_wrap');
                if ((variationWrap!==null)&&(variationWrap!==undefined)&&(variationWrap.length>0)) {
                    makeOfferButton=variationWrap[0].getElementsByClassName('offers-for-woocommerce-make-offer-button-single-product');
                    if ((makeOfferButton!==null)&&(makeOfferButton!==undefined)&&(makeOfferButton.length>0)) {
                        adjustVariationPriceAndQty(makeOfferButton[0].form);
                        makeOfferButton[0].addEventListener('click',changeOfferPrice);
                    }
                }
                
                /*
                 * if counter offer, set price immediately
                 */
                if (counterOffer==1) changeOfferPrice();

                    
                formObj=document.getElementById("woocommerce-make-offer-form");
                
                /*
                 * add multi-currency fields
                 */
                //multiCurrency(formObj);
            
                /*
                 * add a div to hold the offer too low msg
                 */
                newDiv=document.createElement("div");
                newDiv.setAttribute("id","too_low_msg");
                newDiv.setAttribute("style","display: none;");
                formObj.appendChild(newDiv);
                document.getElementById("too_low_msg").innerText="<?= str_replace('"','\"',$options['toolowmsg']) ?>";
                
                /*
                 * Change class name on Make an Offer button
                 */
                parentDiv=document.getElementById("offers-for-woocommerce-add-to-cart-wrap");
                buttonObj=parentDiv.getElementsByClassName('offers-for-woocommerce-make-offer-button-single-product Albutton  offers-for-woocommerce-make-offer-button-single-product-lightbox button alt');
                //buttonObj[0].className='intrackt_offers_button';
                
                /*
                 * Add onclick listener to button to test the min value
                 */
                if (declinePercent>0) {
                    document.getElementById("woocommerce-make-offer-form-submit-button").addEventListener("click", function(e) { testTooLow(e);});
                }

                /* ignore href link */ 
                return false;
            }
            
            /*
             * write the Javascript function to change the page when the link is clicked using layout B
             */
            function usingIntractMAOLinkLB() {
            
                /* turn off offers link */
                document.getElementById("Intract_Offers_Link").style.display="none";
                
                /*
                 * hide add to cart button
                 */
                if (<?= $options['hideaddtocart'] ?>==1) {
                    possibleObjs=document.getElementsByClassName("single_add_to_cart_button");
                    for (i=0;i<possibleObjs.length;i++) {
                        if (possibleObjs[i].tagName=='BUTTON')
                            possibleObjs[i].style.display="none";
                    }
                }
            
                /*
                 * Set add to cart button text
                 */
                buttonText="<?= str_replace('"','&quot;',$options['addtocarttext']) ?>";
                if (buttonText!='') {
                    possibleObjs=document.getElementsByClassName("single_add_to_cart_button");
                    for (i=0;i<possibleObjs.length;i++) {
                        if (possibleObjs[i].tagName=='BUTTON')
                            possibleObjs[i].innerHTML=buttonText;
                    }
                }
            
                /* show offers button with our text override */ 
                maoButton = document.querySelector('[id^="offers-for-woocommerce-make-offer-button-id-"]');
                //maoButton.innerText="<?= $options['offerstext'] ?>";
                maoButton.style.display="inline";
                
                /*
                 * set offers quantity to 1 and hide it
                 */
                if (<?= $options['setqtyto1'] ?>==1) {
                    qtyObj=document.getElementById("woocommerce-make-offer-form-quantity");
                    qtyObj.value=1;
                    qtyObj.parentNode.style.display="none";
                }
                
                /*
                 * set even to show price when offer form opened.
                 */
                variationWrap=document.getElementsByClassName('single_variation_wrap');
                if ((variationWrap!==null)&&(variationWrap!==undefined)&&(variationWrap.length>0)) {
                    makeOfferButton=variationWrap[0].getElementsByClassName('offers-for-woocommerce-make-offer-button-single-product');
                    if ((makeOfferButton!==null)&&(makeOfferButton!==undefined)&&(makeOfferButton.length>0)) {
                        adjustVariationPriceAndQty(makeOfferButton[0].form);
                        makeOfferButton[0].addEventListener('click',changeOfferPrice);
                    }
                }
                                
                formObj=document.getElementById("woocommerce-make-offer-form");
                
                /*
                 * add multi-currency fields
                 */
                //multiCurrency(formObj);
            
                /*
                 * add a div to hold the offer too low msg
                 */
                newDiv=document.createElement("div");
                newDiv.setAttribute("id","too_low_msg");
                newDiv.setAttribute("style","display: none;");
                formObj.appendChild(newDiv);
                document.getElementById("too_low_msg").innerText="<?= str_replace('"','&quot;',$options['toolowmsg']) ?>";

                /*
                 * Change class name on Make an Offer button
                 */
                parentDiv=document.getElementById("offers-for-woocommerce-add-to-cart-wrap");
                buttonObj=parentDiv.getElementsByClassName('offers-for-woocommerce-make-offer-button-single-product Albutton  offers-for-woocommerce-make-offer-button-single-product-lightbox button alt');
                //buttonObj[0].className='intrackt_offers_button';
                
                /*
                 * Add onclick listener to button to test the min value
                 */
                if (declinePercent>0) {
                    document.getElementById("woocommerce-make-offer-form-submit-button").addEventListener("click", function(e) { testTooLow(e);});
                }

                /* ignore href link */ 
                return false;
            }
        
        /*
         * Process Make an Offer layoue A
         */
        if (document.getElementById("tab-title-tab_custom_ofwc_offer") != null) {
        
            /*
             * Hide the AngellEye offers display if not counter offer
             */
            if (counterOffer==0) {
                document.getElementById("tab-title-tab_custom_ofwc_offer").style.display="none";
                document.getElementById("tab-tab_custom_ofwc_offer").style.display="none";
                document.getElementById("tab_custom_ofwc_offer_tab_inner").style.display="none";
                document.querySelector('[id^="offers-for-woocommerce-make-offer-button-id-"]').style.display="none";
                
            }

            /*
             * Set add to cart button text
             */
            buttonText="<?= str_replace('"','&quot;',$options['addtocarttext']) ?>";
            if (buttonText!='') {
                possibleObjs=document.getElementsByClassName("single_add_to_cart_button");
                for (i=0;i<possibleObjs.length;i++) {
                    if (possibleObjs[i].tagName=='BUTTON')
                        possibleObjs[i].innerHTML=buttonText;
                }
            }

            /*
             * show the offers link
             */
            //document.getElementById("Intract_Offers_Link").innerHTML="<a href='#' onclick='return usingIntractMAOLinkLA()'><?= str_replace('"','\"',$options['linktext']) ?></a>";
            
            /*
             * Make all the changes with no link
             */
            document.addEventListener("DOMContentLoaded", usingIntractMAOLinkLA);
        
        /*
         * Process Make an Offer layout B
         */
        } else if (document.querySelector('[id^="offers-for-woocommerce-make-offer-button-id-"]') != null) {
            
            /*
             * Hide the plugin's button
             */
            document.querySelector('[id^="offers-for-woocommerce-make-offer-button-id-"]').style.display="none";
            
            /*
             * show the offers link
             */
            //document.getElementById("Intract_Offers_Link").innerHTML="<a href='#' onclick='return usingIntractMAOLinkLB()'><?= str_replace('"','\"',$options['linktext']) ?></a>";
        
            /*
             * Make all the changes with no link
             */
            document.addEventListener("DOMContentLoaded", usingIntractMAOLinkLB);
        
        }
        
        </script>
        
        <?php

    }    
        
    /*
     * add/edit admin product footer code to change display
     */
    public static function adminFooter() {

        //PageLog::updateTestLog("adminfooter: start");
        
        $options = apply_filters('intrackt_offers_get_options',\get_option('intrackt_offers'),__FUNCTION__,func_get_args());        
        
        $user=wp_get_current_user();
        
        /*
         * do only if editing an offer
         */
        if ((strpos($_SERVER['SCRIPT_NAME'],'post.php')!==false)&&array_key_exists("action",$_GET)&&($_GET["action"] == "edit")&&array_key_exists("post",$_GET)&&(get_post_type(intval($_GET["post"])) == "woocommerce_offer")) {

            /*
             * replace tokens of currency and price with correct values
             */
            $postId=intval($_GET['post']);
            $price=get_post_meta($postId,'offer_product_price',true);
            $priceRaw=get_post_meta($postId,'offer_product_price_raw',true);
            $currency=self::getCurrency($postId);
            $replaceParams=apply_filters('intrackt_offers_set_admineditnote',
                array(
                    'message'=>$options['admineditnote'],
                    'tokens'=>array(
                        '[currency]',
                        '[price]'
                        ),
                    'values'=>array(
                        $currency,
                        $price
                        )
                ),$postId,$priceRaw);

            $message=str_replace('"','\"',str_replace($replaceParams['tokens'],$replaceParams['values'],$replaceParams['message']));
            
            /*
             * Are we applying a note to the editing of an offer in the admin
             */
            if ($message!='') {

                ?>
                <script>
                    document.addEventListener("DOMContentLoaded", addOfferAdminNotes);
                    function addOfferAdminNotes() {
                        offerFields=document.getElementsByClassName('offer-original-meta-values-wrap');
                        if ((offerFields===null)||(offerFields==undefined)) return;
                        newDiv=document.createElement("div");
                        newDiv.style.width='100%';
                        newDiv.style.fontWeight='bold';
                        newDiv.innerHTML="<?= $message ?>";
                        locationNode=offerFields[0].parentNode.parentNode.parentNode;
                        locationNode.prepend(newDiv);
                    }
                </script>
                <?php
                
            }

        /*
         * do only if adding an offer
         */
        } else if ((strpos($_SERVER['SCRIPT_NAME'],'post-new.php')!==false)&&array_key_exists("post_type",$_GET)&&($_GET["post_type"] == "woocommerce_offer")) {

            $replaceParams=apply_filters('intrackt_offers_set_adminaddnote',
                array(
                    'message'=>$options['adminaddnote'],
                    'tokens'=>array(
                        '[currency]'
                        ),
                    'values'=>array(
                        \get_option('woocommerce_currency')
                        )
                ));

            $message=str_replace('"','\"',str_replace($replaceParams['tokens'],$replaceParams['values'],$replaceParams['message']));
            
            if ($message!='') {
                
                ?>
                <script>
                    document.addEventListener("DOMContentLoaded", addOfferAdminNotes);
                    function addOfferAdminNotes() {
                        offerFields=document.getElementsByClassName('angelleye-form-field');
                        if ((offerFields===null)||(offerFields==undefined)) return;
                        newDiv=document.createElement("div");
                        newDiv.style.width='100%';
                        newDiv.style.fontWeight='bold';
                        newDiv.innerText="<?= $message ?>";
                        locationNode=offerFields[0].parentNode.parentNode;
                        locationNode.prepend(newDiv);
                    }
                </script>
                <?php
            
            }

        }

        /*
         * do only if viewing list of offers or editing an offer 
         */
        $dealingWithOffers=false;
        $editingAnOffer=false;
        if ((strpos($_SERVER['SCRIPT_NAME'],'edit.php')!==false)&&array_key_exists("post_type",$_GET)&&($_GET["post_type"] == "woocommerce_offer")) {
            $dealingWithOffers=true;
        } elseif ((strpos($_SERVER['SCRIPT_NAME'],'post.php')!==false)&&array_key_exists("action",$_GET)&&($_GET["action"] == "edit")&&array_key_exists("post",$_GET)&&(get_post_type(intval($_GET["post"])) == "woocommerce_offer")) {
            $dealingWithOffers=true;
            $editingAnOffer=true;
        }
        if ($dealingWithOffers) {

            /*
             * where another plugin can list or edit offers if this plugin is installed
             */
            do_action("intrackt_offers_listoredit_offers",$user,$editingAnOffer);

            /*
             * if editing an offer
             */
            if ($editingAnOffer) {

                /*
                 * where another plugin can edit offers if this plugin is installed
                 */
                do_action("intrackt_offers_edit_offers",$user);

                /*
                 * if revolution Slider is installed, Hide it
                 */
                ?>
                <script>
                    revolutionSliderObj=document.getElementById('mymetabox_revslider_0');
                    if (revolutionSliderObj!==null) revolutionSliderObj.style.display='none';
                </script>
                <?php

            }

        }
        
        /*
         * bail out if not setting defaults for new products
         */
        if ($options['exitonly'] == 0) {
            return;
        }
        
        /*
         * do only if adding or editing a product
         */
        if (array_key_exists("post_type",$_GET) && ($_GET["post_type"] == "product")) {
            
            /*
             * make all products enabled for offers with the default values set
             */
            ?>
            <script>
                objId=document.getElementById('offers_for_woocommerce_enabled');
                if (objId != undefined) {
                    objId.checked=true;
                }
                
                <?php
                if ($options['autoaccept'] == 1) {
                    ?>
                    objId=document.getElementById('_offers_for_woocommerce_auto_accept_enabled');
                    if (objId != undefined) {
                        objId.checked=true;
                    }
                    objId=document.getElementById('_offers_for_woocommerce_auto_accept_percentage');
                    if (objId != undefined) {
                        objId.value=<?= $options['acceptpercent'] ?>;
                    }
                    <?php
                }
                if ($options['autodecline'] == 1) {
                    ?>
                    objId=document.getElementById('_offers_for_woocommerce_auto_decline_enabled');
                    if (objId != undefined) {
                        objId.checked=true;
                    }
                    objId=document.getElementById('offers_for_woocommerce_auto_decline_percentage');
                    if (objId != undefined) {
                        objId.value=<?= $options['declinepercent'] ?>;
                    }
                    <?php
                }
                ?>
            </script>
            <?php
        }
        
    }
        
    /*
     * set the values for offers from the global values when a product is duplicated
     */
    public static function productDuplicated($newProduct,$oldProduct) {
        
        $options = apply_filters('intrackt_offers_get_options',\get_option('intrackt_offers'),__FUNCTION__,func_get_args());        
        
        /*
         * Get the record ID of the new
         */
        $post_id=$newProduct->get_id();
        
        /*
         * only set the values if exitonly in enabled
         */
        if ($options['exitonly'] == 1) {
            
            update_post_meta($post_id,'offers_for_woocommerce_enabled','yes');
            update_post_meta($post_id,'offers_for_woocommerce_onexit_only',($options['exitonly']==1)?'yes':'no');
            update_post_meta($post_id,'_offers_for_woocommerce_auto_accept_enabled',($options['autoaccept']==1)?'yes':'no');
            update_post_meta($post_id,'_offers_for_woocommerce_auto_decline_enabled',($options['autodecline']==1)?'yes':'no');
            update_post_meta($post_id,'_offers_for_woocommerce_auto_accept_percentage',$options['acceptpercent']);
            update_post_meta($post_id,'_offers_for_woocommerce_auto_decline_percentage',$options['declinepercent']);
            
        }
        
        //$metas=get_post_meta($post_id);
        
        //PageLog::updateTestObjectLog("duplicated product metas: ", $metas);
        
        
    }
        
    /*
     * Replace storefront make an offer form
     */
    public static function filterStorefrontMakeOfferForm($content,$is_counter_offer,$on_exit_enabled) {
        
        global $post,$current_user;
        
        $options = apply_filters('intrackt_offers_get_options',\get_option('intrackt_offers'),__FUNCTION__,func_get_args());        
        $price=get_post_meta($post->ID,'_regular_price',true);
        $currency=self::getCurrency($post->ID);
        $replaceParams=apply_filters('intrackt_offers_set_storefrontnote',
            array(
                'message'=>str_replace(array("\\'",'\"'),array("'",'"'),$options['storefrontnotes']),
                'tokens'=>array(
                    '[currency]',
                    '[price]'
                    ),
                'values'=>array(
                    $currency,
                    "<span id='intrackt_offer_price'>".wc_price($price,array('currency'=>$currency))."</span>"
                    )
            ),$content,$is_counter_offer,$on_exit_enabled);

        $message=str_replace($replaceParams['tokens'],$replaceParams['values'],$replaceParams['message']);
     return $message;
        }
        
    /*
     * get the currency
     */
    private static function getCurrency($postId) {
        
        /*
         * if ajax or storefront
         */
        if (wp_doing_ajax()||!is_admin()) {

            if ((!isset($_SESSION))||(!is_array($_SESSION))||(!array_key_exists('wcj-currency',$_SESSION))) {
                $_SESSION['wcj-currency']=\get_option('woocommerce_currency');
            }
            return apply_filters('intrackt_offers_get_currency',$_SESSION['wcj-currency'],$postId.'storefront');
            
        /*
         * else assume admin
         */
        } else {
            
            return apply_filters('intrackt_offers_get_currency',
                    ($postId!=0)?get_post_meta($postId,'offer_currency',true):\get_option('woocommerce_currency'),$postId,'admin');
            
        }
    }
        
    /*
     * replace retrieved post meta prices with the real ones IF not asking for the real one!
     */
    public static function filterGetPostMeta($newValue,$postId,$metaKey,$single) {
        
        global $intracktOffersCurrencies,$intracktNoPostMetaConversions;
        
        //if ($metaKey=='_regular_price') {
        //    error_log('filterGetPostMeta A: _regular_price');
            //PageLog::updateTestLog('filterGetPostMeta: _regular_price');
        //}
        
        /*
         * return real value if inside get/add/update postmeta
         */
        if (isset($GLOBALS['intracktNoPostMetaConversions'])&&
            ($intracktNoPostMetaConversions==1))
            return null;

        //if ($metaKey=='_regular_price') {
        //    error_log('filterGetPostMeta B: _regular_price');
            //PageLog::updateTestLog('filterGetPostMeta: _regular_price');
        //}
        
        //if ($metaKey=='offer_price_per') {
            //PageLog::updateTestLog('filterGetPostMeta B for offer_price_per');
        //}
        
        /*
         *  from here on out, we need the real values
         */
        $intracktNoPostMetaConversions=1;
        
        /*
         * get product prices, but quit if not multicurrency
         * else get product
         */
        if (!self::getProductPrices($postId)) {
            $intracktNoPostMetaConversions=0;
            return null;
        }
        //PageLog::updateTestLog('filterGetPostMeta: getProductPrices');
        
        //if ($metaKey=='_regular_price') {
        //    error_log('filterGetPostMeta C: _regular_price');
            //PageLog::updateTestLog('filterGetPostMeta: _regular_price');
        //}
        
        /*
         * get the currency
         */
        $currency=self::getCurrency($postId);
        
        /*
         * get the multicurrency values if needed
         */
        $returnValue=null;
        switch ($metaKey) {
            case 'orig_offer_price_per':
                $returnValue=get_post_meta($postId,$metaKey.'_'.$currency,$single);
            case 'orig_offer_amount':
                $price=get_post_meta($postId,'orig_offer_price_per_'.$currency,true);
                $qty=get_post_meta($postId,'orig_offer_quantity',true);
                $price=($price=='')?0:$price;
                $qty=($qty=='')?0:$qty;
                $returnValue=$single?$price*$qty:array($price*$qty);
                break;
            case 'offer_product_price':
                if (array_key_exists($currency,$intracktOffersCurrencies[$postId])) {
                //if (!array_key_exists($currency,$intracktOffersCurrencies[$postId])) {
                    //PageLog::updateTestLog("currency missing \$postId='{$postId}', \$currency='{$currency}'");
                //} else {
                    $displayPrice=html_entity_decode(preg_replace('/\<[^\<]*\>/','',\wc_price($intracktOffersCurrencies[$postId][$currency],array('currency'=>$currency))));
                    $returnValue=$single?$displayPrice:array($displayPrice);
                }
                break;
            case '_regular_price':
                if ((!array_key_exists($postId,$intracktOffersCurrencies))||
                    (!array_key_exists($currency,$intracktOffersCurrencies[$postId]))) {
                    $returnValue=null;
                } else {
                    $returnValue=$intracktOffersCurrencies[$postId][$currency];
                }
                break;
            case 'offer_total':
                $price=get_post_meta($postId,'offer_price_per_'.$currency,true);
                $qty=get_post_meta($postId,'offer_quantity',true);
                $returnValue=$single?$price*$qty:array($price*$qty);
                break;
            case 'offer_price_per':
                $returnValue=get_post_meta($postId,$metaKey.'_'.$currency,$single);
                //if ($single)
                    //PageLog::updateTestLog("offer_price_per: \$postId='{$postId}', \$currency='{$currency}', \$returnValue='{$returnValue}'");
                //else
                    //PageLog::updateTestObjectLog("offer_price_per: \$postId='{$postId}', \$currency='{$currency}', \$returnValue",$returnValue);
                break;
            case 'offer_buyer_counter_price_per':
                $returnValue=get_post_meta($postId,$metaKey.'_'.$currency,$single);
                break;
            case 'offer_amount':
                $price=get_post_meta($postId,'offer_price_per_'.$currency,true);
                $qty=get_post_meta($postId,'offer_quantity',true);
                if (($price=='')||($qty=='')) {
                    //PageLog::updateTestLog("\$postId='{$postId}', \$price='{$price}', \$qty='{$qty}'");
                    $returnValue=$newValue;
                } else {
                    $returnValue=$single?$price*$qty:array($price*$qty);
                }
                break;
            case 'offer_buyer_counter_amount':
                $price=get_post_meta($postId,'offer_buyer_counter_price_per_'.$currency,true);
                $qty=get_post_meta($postId,'offer_buyer_counter_quantity',true);
                //if (($price=='')||($qty=='')) ;//PageLog::updateTestLog("\$postId='{$postId}', \$price='{$price}', \$qty='{$qty}'");
                $returnValue=$single?$price*$qty:array($price*$qty);
                break;
            case 'offer_shipping_cost':
                $returnValue=get_post_meta($postId,$metaKey.'_'.$currency,$single);
                break;
            case 'offer_final_offer':
                $returnValue=get_post_meta($postId,$metaKey.'_'.$currency,$single);
                break;
        }
        
        /*
         * go back to permitting fixed value, and return with result
         */
        $intracktNoPostMetaConversions=0;
        return apply_filters('intrackt_offers_get_post_meta',$returnValue,$newValue,$postId,$metaKey,$single);
        
    }
    
    private static function addMultiCurrencyValues($postId,$metaKey,$metaValue) {
        
        global $intracktOffersCurrencies;
        
        /*
         * get current currency
         */
        $currency=self::getCurrency($postId);

        //PageLog::updateTestObjectLog("addMultiCurrencyValues({$postId},{$currency}): ".'$intracktOffersCurrencies', $intracktOffersCurrencies);
        
        /*
         * get product price for current currency
         */
        $price=$intracktOffersCurrencies[$postId][$currency];
        
        /*
         * loop through prices array, determining offer price in each active currency
         */
        foreach ($intracktOffersCurrencies[$postId] as $thisCurrency=>$value) {
            
            /*
             * no conversion if same currency or if same price
             */
            if (($thisCurrency==$currency)||($price==$value)) {
                //PageLog::updateTestLog("addMultiCurrencyValues same: '{$metaKey}_{$thisCurrency}'=$metaValue");
                update_post_meta($postId,$metaKey."_{$thisCurrency}",$metaValue);
            } else {
                //PageLog::updateTestLog("addMultiCurrencyValues diff: '{$metaKey}_{$thisCurrency}'=".intval(((100*$value*$metaValue)/$price)/100));
                update_post_meta($postId,$metaKey."_{$thisCurrency}",intval(((100*$value*$metaValue)/$price)+.5)/100);
            }
            
        }
    }
        
    /*
     * upon completion of add_post_meta or update_post_meta, add missing multicurrency values
     */
    public static function addUpdatePostMeta($recordId,$postId,$metaKey,$metaValue) {
        
        global $intracktOffersCurrencies,$intracktNoPostMetaConversions;
        
        /*
         * Do nothing if inside get/add/update postmeta
         */
        if (isset($GLOBALS['intracktNoPostMetaConversions'])&&
            ($intracktNoPostMetaConversions==1))
            return;

        /*
         *  from here on out, we need the real values
         */
        $intracktNoPostMetaConversions=1;
        
        /*
         * get product prices, but quit if not multicurrency
         * else get product
         */
        if (!self::getProductPrices($postId)) {
            $intracktNoPostMetaConversions=0;
            return;
        }
        //PageLog::updateTestLog('addUpdatePostMeta: getProductPrices');
        
        /*
         * add/update multicurrency values
         */
        switch ($metaKey) {
            case 'orig_offer_price_per':
                self::addMultiCurrencyValues($postId,$metaKey,$metaValue);
                break;
            case 'offer_price_per':
                //PageLog::updateTestLog('addUpdatePostMeta: offer_price_per');
                self::addMultiCurrencyValues($postId,$metaKey,$metaValue);
                break;
            case 'offer_buyer_counter_price_per':
                //PageLog::updateTestLog('addUpdatePostMeta: offer_buyer_counter_price_per');
                self::addMultiCurrencyValues($postId,$metaKey,$metaValue);
                break;
            case 'offer_shipping_cost':
                self::addMultiCurrencyValues($postId,$metaKey,$metaValue);
                break;
            case 'offer_final_offer':
                self::addMultiCurrencyValues($postId,$metaKey,$metaValue);
                break;
            case 'offer_product_price':
                $currency=self::getCurrency($postId);
                if (array_key_exists($postId,$intracktOffersCurrencies)&&array_key_exists($currency,$intracktOffersCurrencies[$postId])) {
                    update_post_meta($postId,$metaKey,html_entity_decode(preg_replace('/\<[^\<]*\>/','',\wc_price($intracktOffersCurrencies[$postId][$currency],array('currency'=>$currency)))));
                }
                break;
        }
        
        /*
         * go back to permitting interception of add/get/update postmeta
         */
        $intracktNoPostMetaConversions=0;
        return;
        
    }
        
    /*
     * Obtain all multi-currency prices for a product as a global array
     * returns true or false if multicurrency is active or not
     */
    private static function getProductPrices($postId) {
        
        global $wpdb,$intracktOffersCurrencies,$intracktGetProductPrices,$intracktMultiCurrency,$intracktAdminNewOfferSaved;
        
        //if ($intracktAdminNewOfferSaved==1) //PageLog::updateTestLog('getProductPrices A');
        
        /*
         * bail out if we already know multi currency is missing
         */
        if (isset($GLOBALS['intracktMultiCurrency'])&&
            ($intracktMultiCurrency==0)) {
            return false;
        }
        
        //if ($intracktAdminNewOfferSaved==1) //PageLog::updateTestLog('getProductPrices B');
        
        /*
         * test for multi currency and bail out if missing
         */
        if (is_plugin_active('woocommerce-jetpack/woocommerce-jetpack.php')&&
            (get_option('wcj_multicurrency_enabled','no')=='yes'))
            $intracktMultiCurrency=1;
        else {
            $intracktMultiCurrency=0;
            return false;
        }
        
        //if ($intracktAdminNewOfferSaved==1) //PageLog::updateTestLog('getProductPrices C');
        
        /*
         * don't bother if we have the prices for this product
         */
        if (isset($GLOBALS['intracktOffersCurrencies'])&&
            is_array($intracktOffersCurrencies)&&
            array_key_exists($postId,$intracktOffersCurrencies)) 
            return true;
        
        //if ($intracktAdminNewOfferSaved==1) //PageLog::updateTestLog('getProductPrices D');
        
        /*
         * if this is an offer
         */
        if (\get_post_type($postId)=='woocommerce_offer') {
            
            //PageLog::updateTestLog("getProductPrices start: \$postId='{$postId}' ----------------------");

            /*
             * get variation, but if missing, then use product
             */
            $productId=get_post_meta($postId,'offer_variation_id',true);
            if ($productId=='') {

                $productId=get_post_meta($postId,'offer_product_id',true);
                
                /*
                 * if product hasn't been attached-- wait
                 */
                if ($productId=='') return true;
            
            }
        
        /*
         * but if product, use that
         */
        } else {
            $productId=$postId;
        }
        
        //if ($intracktAdminNewOfferSaved==1) //PageLog::updateTestLog('getProductPrices E: '.$productId);
        
        /*
         * build array of all prices
         */
        {
            // always need the real WOO price of the product
            //$postPrices['WOO']=get_post_meta($productId,'_regular_price',true);
            
            // get all other currencies for product
            $currencies=$wpdb->get_results("
                SELECT REPLACE(meta_key,'_wcj_multicurrency_per_product_regular_price_','') AS currency, meta_value
                FROM {$wpdb->prefix}postmeta
                WHERE post_id={$productId}
                    AND meta_key LIKE '_wcj_multicurrency_per_product_regular_price_%'
                ",ARRAY_A);
            $postPrices=array();
            foreach ($currencies as $currency) {
                $postPrices[$currency['currency']]=$currency['meta_value'];
            
            }
        }
        
        /*
         * add to offer currencies array (doing it this way in the wild off chance that multiple products might be looked at on a single page load
         */
        $intracktOffersCurrencies[$postId]=apply_filters('intrackt_offers_getproductprices',$postPrices,$postId);
        
        //if ($productId!=$postId)
            //if ($intracktAdminNewOfferSaved==1) //PageLog::updateTestObjectLog('$intracktOffersCurrencies', $intracktOffersCurrencies);
        
        return true;
        
      }    

    /*
     * Intercept offer before it is created
     */
    public static function actionBeforeOfferSubmit($isCounterOffer,$post,$formData,$newPostData) {
        
        global $intracktNoPostMetaConversions;
        
        /*
         * do not perform any meta cconversions until the offer is fully submitted
         */
        $intracktNoPostMetaConversions=1;
        
      }    

    /*
     * Intercept offer right after it is created
     */
    public static function actionAfterOfferSubmit($postId,$post) {
        
        global $intracktNoPostMetaConversions;
                
        /*
         * get currency
         */
        $currency=self::getCurrency($postId);
        
        //PageLog::updateTestLog("actionAfterOfferSubmit: start \$postId='{$postId}', \$currency='{$currency}'");
        
        /*
         * Remember the original currency for this offer
         */
        update_post_meta($postId,'offer_currency',$currency);
        
        //PageLog::updateTestLog("actionAfterOfferSubmit: B \$postId='{$postId}', \$currency='{$currency}'");
        
        /*
         * get post values without conversion
         */
        $intracktNoPostMetaConversions=1;
        $origOfferPricePer=get_post_meta($postId,'orig_offer_price_per',true);
        $offerPricePer=get_post_meta($postId,'offer_price_per',true);
        $offerBuyerCounterPricePer=get_post_meta($postId,'offer_buyer_counter_price_per',true);
        $offerShippingCost=get_post_meta($postId,'offer_shipping_cost',true);
        $offerFinalOffer=get_post_meta($postId,'offer_final_offer',true);
        $intracktNoPostMetaConversions=0;
        
        //PageLog::updateTestLog("actionAfterOfferSubmit: C \$postId='{$postId}', \$currency='{$currency}'");

        /*
         * build then out for all currencies
         */
        if ($origOfferPricePer!='') update_post_meta($postId,'orig_offer_price_per',$origOfferPricePer);
        if ($offerPricePer!='') {
            update_post_meta($postId,'offer_price_per',$offerPricePer);
        }
        if ($offerBuyerCounterPricePer!='') {
            update_post_meta($postId,'offer_buyer_counter_price_per',$offerBuyerCounterPricePer);
        }
        if ($offerShippingCost!='') update_post_meta($postId,'offer_shipping_cost',$offerShippingCost);
        if ($offerFinalOffer!='') update_post_meta($postId,'offer_final_offer',$offerFinalOffer);
        
        /*
         * set raw product actual price
         */
        $productId=get_post_meta($postId,'orig_offer_variation_id',true);
        if ($productId=='')
            $productId=get_post_meta($postId,'orig_offer_product_id',true);
        $rawPrice=get_post_meta($productId,'_wcj_multicurrency_per_product_regular_price_'.$currency,true);
        update_post_meta($postId,'offer_product_price_raw',$rawPrice);
        
    }
        
    /*
     * Do after all plugins loaded
     */
    public static function pluginsLoaded() {
        
        self::getCurrency(0);
    }
    
    /*
     * filter add to cart item
     */
    public static function addCartItem($cartItem,$cartKey) {
        
        global $intracktCartOfferUnitPrice;
        
        /*
         * exit if not offer
         */
        if (!array_key_exists('woocommerce_offer_id',$cartItem)) return $cartItem;
        
        /*
         * get offer in correct currency
         */
        $offerPrice=get_post_meta($cartItem['woocommerce_offer_id'],'offer_price_per',true);
        
        /*
         * add item to list of prices to adjust when getting proeuct price
         */
        //PageLog::updateTestLog('addCartItem');
        $intracktCartOfferUnitPrice[$cartItem['data']->get_id()]=array(
            'key'=>$cartKey,
            'object'=>$cartItem['data'],
            'price'=>$offerPrice
            );
        
        /*
         * done
         */
        return apply_filters('intrackt_offers_addCartItem',$cartItem,$cartKey);
    }
    
    /*
     * filter getting item froms session
     */
    public static function getCartItemFromSession($cartItem,$values,$cartKey) {
        
        global $intracktCartOfferUnitPrice;
        
        /*
         * exit if not offer
         */
        if (!array_key_exists('woocommerce_offer_id',$cartItem)) return $cartItem;
        
        /*
         * get offer in correct currency
         */
        $offerPrice=get_post_meta($cartItem['woocommerce_offer_id'],'offer_price_per',true);
        
        //PageLog::updateTestLog("getCartItemFromSession: \$offerPrice='{$offerPrice}', \$cartItem['data']->get_id()='{$cartItem['data']->get_id()}'");
        
        /*
         * add item to list of prices to adjust when getting proeuct price
         */
        //PageLog::updateTestLog('getCartItemFromSession');
        $intracktCartOfferUnitPrice[$cartItem['data']->get_id()]=array(
            'key'=>$cartKey,
            'object'=>$cartItem['data'],
            'price'=>$offerPrice
            );
        
        //PageLog::updateTestObjectLog("getCartItemFromSession: \$intracktCartOfferUnitPrice", $intracktCartOfferUnitPrice);
        
        /*
         * done
         */
        return apply_filters('intrackt_offers_getCartItemFromSession',$cartItem,$values,$cartKey);
    }
    
    /*
     * get product price
     */
    public static function cartItemGetPrice($price,$product) {
        
        global $intracktCartOfferUnitPrice;
        
        //PageLog::updateTestLog("cartItemGetPrice A \$product->get_id()='{$product->get_id()}'");
        /*
         * do only if in a cart
         */
        if (isset($GLOBALS['intracktCartOfferUnitPrice'])&&
            is_array($intracktCartOfferUnitPrice)&&
            array_key_exists($product->get_id(),$intracktCartOfferUnitPrice)) {
            
            //PageLog::updateTestLog("cartItemGetPrice B");
            if ($intracktCartOfferUnitPrice[$product->get_id()]['object']===$product) {
                //PageLog::updateTestLog("cartItemGetPrice C");
                $price=$intracktCartOfferUnitPrice[$product->get_id()]['price'];
            }
            
        }
        
        return apply_filters('intrackt_offers_getprice',$price,$product);
        
    }
    
    /*
     * hook top of email message
     */
    public static function emailTopAction($headingText,$email=null) {
        
        global $intracktOffersMulticurrencyOfferCurrency,$intracktOffersMulticurrencyOfferPrice;
        
        /*
         * if second argument missing, cannot test for offer emails, so bail
         */
        if ($email===null) {
            
            return;
            
        /*
         * else I can test, bail if not an offer email
         */
        } else {
        
            /*
             * exit if not offer email
             */
            $offerEmails=array(
                'wc_accepted_offer',
                'wc_countered_offer',
                'wc_declined_offer',
                'wc_offer_note',
                'wc_offer_on_hold',
                'wc_open_offer'
                );
            if (!in_array($email->id,$offerEmails)) return;
        }
        
        /*
         * remember correct offer currency and price
         */
        $offerId=$email->offer_args['offer_id'];
        $intracktOffersMulticurrencyOfferCurrency=get_post_meta($offerId,'offer_currency',true);
        $intracktOffersMulticurrencyOfferPrice=get_post_meta($offerId,'offer_product_price_raw',true);

        /*
         * modify get regular price
         */
        //PageLog::updateTestLog("emailTopAction: \$intracktOffersMulticurrencyOfferCurrency='{$intracktOffersMulticurrencyOfferCurrency}', \$intracktOffersMulticurrencyOfferPrice='$intracktOffersMulticurrencyOfferPrice}'");
        add_filter('wc_price_args',array('\Intrackt\Offers\Actions','setWcPriceCurrency'),10,1);
        add_filter('woocommerce_product_get_regular_price',array('\Intrackt\Offers\Actions','getRegularPrice'),PHP_INT_MAX,2);
        add_filter('woocommerce_product_variation_get_regular_price',array('\Intrackt\Offers\Actions','getRegularPrice'),PHP_INT_MAX,2);
        
        //PageLog::updateTestLog("vvvvvvvvvvvvvvvvvvv");
        //PageLog::updateTestLog("emailTopAction: price=".wc_price($email->offer_args['product']->get_regular_price()));
        //PageLog::updateTestLog("^^^^^^^^^^^^^^^^^^^");
        
    }
    
    /*
     * hook bottom of email message
     */
    public static function emailBottomAction() {
        
        /*
         * don't modify get regular price
         */
        remove_filter('wc_price_args',array('\Intrackt\Offers\Actions','setWcPriceCurrency'),10);
        remove_filter('woocommerce_product_get_regular_price',array('\Intrackt\Offers\Actions','getRegularPrice'),PHP_INT_MAX);
        remove_filter('woocommerce_product_variation_get_regular_price',array('\Intrackt\Offers\Actions','getRegularPrice'),PHP_INT_MAX);
        
    }
    
    /*
     * hook top of email message
     */
    public static function setWcPriceCurrency($args) {
        
        global $intracktOffersMulticurrencyOfferCurrency;
        
        $args['currency']=$intracktOffersMulticurrencyOfferCurrency;
        
        return $args;
        
    }
    
    /*
     * get product price
     */
    public static function getRegularPrice($price,$product) {
        
        global $intracktOffersMulticurrencyOfferPrice;
                
        //PageLog::updateTestLog("getRegularPrice: \$product->get_id()='{$product->get_id()}'");
        return apply_filters('intrackt_offers_getregularprice',$intracktOffersMulticurrencyOfferPrice,$product);
        
    }
    
    /*
     * Offer has been added via admin before update
     */
    public static function actionBeforeAdminEditPost() {
        
        global $intracktNoPostMetaConversions,$intracktAdminNewOfferSaved,$intracktOffersCurrencies;
        
        /*
         * we need to be doing a new offer only: get its postId
         */
        if (empty($_POST['ofw-admin-makeoffer'])) return;
        $postId = intval($_POST['post_ID']);
        
        //PageLog::updateTestLog("actionBeforeAdminEditPost: \$postId='{$postId}' ----------------------------------------");
        //PageLog::updateTestObjectLog("actionBeforeAdminEditPost start: \$intracktOffersCurrencies",$intracktOffersCurrencies);
        //PageLog::updateTestObjectLog("actionBeforeAdminEditPost start: postmeta",get_post_meta($postId));
        
                
        /*
         * get currency
         */
        $currency=get_option('woocommerce_currency');
        
        /*
         * update critical values
         */
        $intracktNoPostMetaConversions=1;
        update_post_meta($postId,'offer_currency',$currency);
        update_post_meta($postId,'offer_product_id',intval($_POST['offer_product_id']));
        update_post_meta($postId,'offer_variation_id',array_key_exists('offer_variation_id',$_POST)?(($_POST['offer_variation_id']!='')?intval($_POST['offer_variation_id']):''):'');
        
        /*
         * get product prices and bail out if not multicurrency
         */
        if (!self::getProductPrices($postId)) {
            return;
        }
        
        /*
         * update product prices
         */
        update_post_meta($postId,'offer_product_price_raw',$intracktOffersCurrencies[$postId][$currency]);
        
        /*
         * set all multi-currency fields 
         */
        $intracktNoPostMetaConversions=0;
        if (array_key_exists('offer_price_each',$_POST)) {
            update_post_meta($postId,'orig_offer_price_per',floatval($_POST['offer_price_each']));
            update_post_meta($postId,'offer_price_per',floatval($_POST['offer_price_each']));
        }
        if (array_key_exists('offer_shipping_cost',$_POST))
            update_post_meta($postId,'offer_shipping_cost',floatval($_POST['offer_shipping_cost']));
        else
            update_post_meta($postId,'offer_shipping_cost','0.00');
        
    }
    
}
